// Generated by CoffeeScript 1.10.0
var Cell,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Cell = (function(superClass) {
  extend(Cell, superClass);

  Cell.prototype.CELL_LAYER_TAG = "cell-layer";

  Cell.prototype.TEXT_LAYER_TAG = "text-layer";

  Cell.prototype.colorFormatter = new ColorFormatter();

  function Cell(context, layer) {
    var children, i, j, ref;
    if (layer == null) {
      layer = null;
    }
    Cell.__super__.constructor.call(this, context, layer);
    if (!this.layer) {
      this.layer = this.template.getCell();
    }
    this.height = this.layer.frame().height();
    this.width = this.layer.frame().width();
    children = this.layer.children();
    this.formatColorLayers = [];
    for (i = j = 0, ref = children.count(); 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
      layer = children[i];
      switch ("" + (layer.name())) {
        case "Color":
          this.colorLayer = layer;
          break;
        case "Name":
          this.nameLayer = layer;
          break;
        case "Background":
          this.backgroundLayer = layer;
          break;
        case "Transparent":
          continue;
        case "Cell":
          continue;
        case "Path":
          continue;
        default:
          this.formatColorLayers.push(layer);
      }
    }
  }

  Cell.prototype.setX = function(x) {
    return this.layer.frame().setX(x);
  };

  Cell.prototype.setY = function(y) {
    return this.layer.frame().setY(y);
  };

  Cell.prototype.setColor_withName = function(color, name) {
    var colorDictionary, formattedColor, j, layer, len, ref;
    colorDictionary = ColorFormatter.colorToDictionary(color, name);
    ref = this.formatColorLayers;
    for (j = 0, len = ref.length; j < len; j++) {
      layer = ref[j];
      formattedColor = this.colorFormatter.formatColorDictionary_withFormat_commented(colorDictionary, "" + (layer.name()), false);
      if (formattedColor) {
        layer.stringValue = formattedColor;
      }
    }
    this.colorLayer.style().fills().firstObject().setColor(color);
    this.nameLayer.stringValue = name;
    this.layer.setName(name);
    this.setValue_forKey(colorDictionary, this.CELL_LAYER_TAG);
    return this.setValue_forKey_onLayer(colorDictionary.hex, this.TEXT_LAYER_TAG, this.nameLayer);
  };

  return Cell;

})(Base);
